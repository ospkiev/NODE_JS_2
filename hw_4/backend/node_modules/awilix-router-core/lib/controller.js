"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createController = createController;
exports.createControllerFromState = createControllerFromState;
const state_util_1 = require("./state-util");
const http_verbs_1 = require("./http-verbs");
const symbols_1 = require("./symbols");
/**
 * Configures routing config for a class or function to be invoked by a router.
 *
 * @example
 *   const api = ({ todoService }) => ({
 *     find: (ctx) => { ... }
 *   })
 *
 *   export default createController(api)
 *     .prefix('/todos')
 *     .before(bodyParser())
 *     .get('/', 'find')
 *     .get('/:id', 'get')
 *     .post('/:id', 'create', {
 *       before: [authenticate()],
 *     })
 *     .patch('/:id', 'update', {
 *       before: [authenticate()]
 *     })
 */
function createController(ClassOrFunction) {
    return createControllerFromState(ClassOrFunction, (0, state_util_1.createState)());
}
/**
 * Creates a builder from existing state.
 * This is used internally, but exported for convenience.
 *
 * @param ClassOrFunction The target to invoke.
 * @param state Existing state to continue building on.
 */
function createControllerFromState(ClassOrFunction, state) {
    const builder = {
        [symbols_1.STATE]: state,
        [symbols_1.IS_CONTROLLER_BUILDER]: true,
        target: ClassOrFunction,
        get: createVerbFunction(http_verbs_1.HttpVerbs.GET),
        post: createVerbFunction(http_verbs_1.HttpVerbs.POST),
        put: createVerbFunction(http_verbs_1.HttpVerbs.PUT),
        patch: createVerbFunction(http_verbs_1.HttpVerbs.PATCH),
        delete: createVerbFunction(http_verbs_1.HttpVerbs.DELETE),
        head: createVerbFunction(http_verbs_1.HttpVerbs.HEAD),
        options: createVerbFunction(http_verbs_1.HttpVerbs.OPTIONS),
        connect: createVerbFunction(http_verbs_1.HttpVerbs.CONNECT),
        all: createVerbFunction(http_verbs_1.HttpVerbs.ALL),
        prefix(path) {
            return createControllerFromState(ClassOrFunction, (0, state_util_1.addRoute)(state, null, path));
        },
        before(middleware) {
            return createControllerFromState(ClassOrFunction, (0, state_util_1.addBeforeMiddleware)(state, null, middleware));
        },
        after(middleware) {
            return createControllerFromState(ClassOrFunction, (0, state_util_1.addAfterMiddleware)(state, null, middleware));
        },
        verbs(verbs, path, method, opts) {
            state = (0, state_util_1.addRoute)(state, method, path);
            state = (0, state_util_1.addHttpVerbs)(state, method, verbs);
            if (opts) {
                if (opts.before) {
                    state = (0, state_util_1.addBeforeMiddleware)(state, method, opts.before);
                }
                if (opts.after) {
                    state = (0, state_util_1.addAfterMiddleware)(state, method, opts.after);
                }
            }
            return createControllerFromState(ClassOrFunction, state);
        },
    };
    return builder;
    /**
     * Creates a preconfigured verb function.
     *
     * @param verb
     */
    function createVerbFunction(verb) {
        return function configureRoute(path, method, opts) {
            return builder.verbs([verb], path, method, opts);
        };
    }
}
//# sourceMappingURL=controller.js.map